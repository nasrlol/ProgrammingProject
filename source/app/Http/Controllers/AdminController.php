<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\View\View;
use Illuminate\Support\Facades\Http;

class AdminController extends Controller
{

    public function show(Request $request): View
{
    try {
        $apiLogs = $this->apiUrl . 'admin/logs';

        $response = Http::get($this->studentsApiUrl);

        if (!$response->successful()) {
            return view('APINotFound', ['message' => "De API is tijdelijk niet beschikbaar. Gelieve even te wachten, en dan opnieuw te proberen",
            'location' => '/admin'
        ]);
        }

        $students = $response->json('data');
        foreach ($students as &$student) $student['logs'] = array();

        //Second response for companies
        $response = Http::get($this->companiesApiUrl);
        if (!$response->successful()) {
            return view('APINotFound', ['message' => "De API is tijdelijk niet beschikbaar. Gelieve even te wachten, en dan opnieuw te proberen",
            'location' => '/admin'
        ]);}
        
        $companies = $response->json('data');


        foreach ($companies as &$company) $company['logs'] = array();

        $appointments = $this->getAppointments();   
        foreach ($appointments as &$appointment) {
            $appointment['time_slot'] = substr($appointment['time_start'], 0, 5) . ' - '. substr($appointment['time_end'], 0,5);
        }

        $connections = $this->getConnections();
        //Final response for logs
        //Check if the apiURL of the requested logs is active.
        if (isset($request['cursor'])) {
            $response = Http::get($this->apiUrl . 'admin/logs?cursor=' . $request['cursor']);
        }
    
        else $response = Http::get($apiLogs);

        $logs = $response->json('data');
        //save next page from lgos, to add it seperatly in the view
        $nextPage = isset($logs['next_cursor']) ? $logs['next_cursor'] : null;
        $previousPage = isset($logs['prev_cursor']) ? $logs['prev_cursor'] : null;

        

        $logs = $logs['data'];
        //Replace target id with target name
        //code generated by github copilot
        foreach ($logs as &$log) {
            //Translate log actions to dutch

            switch ($log['action']) {
               case 'create':
                    $log['action'] = 'heeft een account aangemaakt';
                    break;
                case 'update':
                    $log['action'] = 'heeft hun account geÃ¼pdatet';
                    break;
                case 'delete':
                    $log['action'] = 'heeft hun account verwijderd';
                    break;
                default:
                    $log['action'] = 'heeft hun account bekeken';
            }

            //setup time
            $log['date'] = substr($log['timestamp'], 8, 2) . "/" . substr($log['timestamp'], 5, 2) . "/" . substr($log['timestamp'], 0, 4);
            $log['time'] = substr($log['timestamp'], 11, 2) . "u" . substr($log['timestamp'], 14, 2);


            //Set target_type to dutch
            if ($log['actor'] === 'Student') {
                $log['actor'] = 'Student';
            } elseif ($log['actor'] === 'Company') {
                $log['actor'] = 'Bedrijf';
            } elseif ($log['actor'] === 'Admin') {
                $log['actor'] = 'Beheerder';
            } else {
                $log['actor'] = 'Onbekend type';
            }

            $id = $log['actor_id'];

            if ($log['actor'] === 'Student') {
                $log['actor_id'] = $this->translateStudent($id);
                //This code adds a log to the user 
                foreach ($students as &$student) {
                    if ($student['id'] == $id) array_push($student['logs'], $log );
                }
            } elseif ($log['actor'] === 'Bedrijf') {
                $log['actor_id'] = $this->translateCompany($id);
                //This code adds a log to the user 
                foreach ($companies as &$company) {
                    if ($company['id'] == $id) array_push($company['logs'], $log );
                }
            }
            elseif ($log['actor'] === 'Admin') {
                $log['actor'] = 'Steve';
            }
        
        }

        $degrees = Http::get($this->apiUrl . 'diplomas')->json('data');
        
        return view('/admin/admin', [
            'students' => $students, 
            'companies' => $companies,
            'appointments' => $appointments,
            'connections' => $connections,
            'logs' => $logs,
            'degrees' => $degrees,
            'nextPage' => $nextPage,
            'previousPage' => $previousPage
    ]);
    } catch (\Exception $e) {
        dd('failure: ' . $e->getMessage());
        return view('voorbeeld.index', ['error' => 'Er is een fout opgetreden', 'students' => []]);
    }
}
#Code created by copilot
#Function to store students the admin created
public function storeS(Request $request)
    {
        try {
            $validated = $request->validate([
            'firstName' => 'required|string|max:255',
            'lastName' => 'required|string|max:255',
            'email' => 'required|email|max:255',
            'graduation_track' => 'required|string|max:255',
            'study_direction' => 'required|string|max:255',
            'password1' => 'required|string|min:8',
            'password2' => 'required|same:password1'
            ]);
        } catch (\Exception $e) {
            return redirect()->back()->with('error', 'Validatie mislukt: ' . $e->getMessage());
        }
        

    // Prepare data for API (use password2 as password)
    $data = [
        'firstName' => $validated['firstName'],
        'lastName' => $validated['lastName'],
        'email' => $validated['email'],
        'password' => $validated['password2'],
        'graduation_track' => $validated['graduation_track'],
        'study_direction' => $validated['study_direction'],
        'interests' => 'Ik heb interesse in...',
        'job_preferences' => 'Ik heb voorkeuren voor...',
        'cv' => 'cv.pdf',
        'profile_complete' => '0',
    ];

try {
    $response = Http::post($this->apiUrl . 'students', $data);

    if ($response->successful()) {
        return redirect()->back()->with('success', 'Student succesvol toegevoegd!');
    } else {
        // Voeg de response body toe aan de foutmelding voor debugging
        return redirect()->back()->with('error', 'Fout bij toevoegen van Student: ' . $response->body());
    }
} catch (\Exception $e) {
    return redirect()->back()->with('error', 'Er is een fout opgetreden: ' . $e->getMessage());
}
    }


    //
    protected function getAppointments() {
        $response = Http::get($this->appointmentApiUrl);

        $data = $response->json('data');
        foreach ($data as &$appointment) {
            //translate student and company id to names
            $appointment['student_id'] = $this->translateStudent($appointment['student_id']);

            
            $appointment['company_id'] = $this->translateCompany($appointment['company_id']);
        }
        return $data;
    }

    protected function getConnections() {
        $response = Http::get($this->connectionsApiUrl);

        $data = $response->json('data');
        foreach ($data as &$connection) {
            //translate student and company id to names
            $connection['student_id'] = $this->translateStudent($connection['student_id']);
            $connection['company_id'] = $this->translateCompany($connection['company_id']);

            if ($connection['status'] === '1') {
                $connection['status'] = 'Actief';
            } 
            else {
                $connection['status'] = 'Afgesloten';
            }
        }
        return $data;
    }

}
